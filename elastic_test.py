from elasticsearch import Elasticsearch
from datetime import datetime
import json

# Password for the 'elastic' user generated by Elasticsearch
ELASTIC_PASSWORD = "Welcome#1"
g_data_json = {'Memory size(GB)': '2.42 GiB', 'Session num(ea)': 5, 'Lock num(ea)': 0, 'Transaction(ea)': 1, 'Tmp size(MB)': '0.09', 'Table Full scan(ea)': 14, 'Database size(GB)': '8.40', 'ErrorLog(1hour,ea)': 1, 'Slow query(>1s,ea)': 0, 'GroupHA(ea)': 0, 'Replication(ea)': '0'}

class CustomJSONEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, datetime):
            return str(o)
        if isinstance(o, date):
            return str(o)
        if isinstance(o, decimal.Decimal):
            return float(o)
        if isinstance(o, struct_time):
            return datetime.fromtimestamp(mktime(o))
        # Any other serializer if needed
        return super(CustomJSONEncoder, self).default(o)


# Create the client instance
client = Elasticsearch(
    "https://localhost:9200",
#    ca_certs="/etc/elasticsearch/certs/http_ca.crt",
    verify_certs=False,
    ssl_show_warn=False,
    basic_auth=("admin", ELASTIC_PASSWORD)
)

# Successful response!
#print(client.info())
g_data_json.update({'timestamp': datetime.utcnow().isoformat()})

g_data_json = json.dumps(g_data_json, cls=CustomJSONEncoder)

if not client.indices.exists(index="mysql-mon-t") :
    client.indices.create(index="mysql-mon-t", settings={"index.mapping.total_fields.limit": 2000})
client.index(index="mysql-mon-t", document=g_data_json)
